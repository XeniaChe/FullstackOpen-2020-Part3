{"version":3,"sources":["components/filter.js","components/PersonForm.js","components/Notification.js","components/Numbers.js","services/contacts.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","onChange","onInput","PersonForm","onSubmit","submit","inputName","inputNumber","type","Notification","message","style","className","Numbers","namesToShow","deleteNumber","actionResult","list","map","el","key","name","number","onClick","id","baseUrl","axios","get","then","response","data","catch","error","console","log","newContact","post","result","delete","put","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filteredPersons","setfilteredPersons","notification","setNotification","setActionResult","useEffect","serviceContacts","returnedContacts","showNotification","setTimeout","length","event","newNameFilter","target","value","filtered","filter","toLowerCase","preventDefault","newPerson","includes","matchId","find","alert","returnedPerson","updatedPersons","returnedContact","personsCopy","concat","newPersons","res","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5e03d02.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Filter = (props) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\tfilter shown with: <input onChange={props.onInput} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\n\r\nconst PersonForm = (props) => {\r\n\treturn (\r\n\t\t<form onSubmit={props.submit}>\r\n\t\t\t<div>\r\n\t\t\t\tname: <input onChange={props.inputName} />\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\tnumber: <input onChange={props.inputNumber} />\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<button type='submit'>add</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default PersonForm;\r\n","import React from 'react';\r\n\r\nconst Notification = ({ message, style }) => {\r\n\tif (message === null) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn <div className={style}>{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React from 'react';\r\nimport Notification from './Notification';\r\n\r\nconst Numbers = ({ namesToShow, deleteNumber, message, actionResult }) => {\r\n\tlet style = actionResult === 'success' ? 'success' : 'error';\r\n\tlet list = null;\r\n\r\n\t if (namesToShow) {\r\n\t\tlist = <ul>\r\n\t\t\t\t{namesToShow.map((el) => (\r\n\t\t\t\t\t<li key={el.name}>\r\n\t\t\t\t\t\t{el.name} : {el.number}\r\n\t\t\t\t\t\t<button onClick={() => deleteNumber(el.id)}>delete</button>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Notification message={message} style={style}/>\r\n\t\t\t{list}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Numbers;\r\n","import axios from 'axios';\r\n\r\nconst baseUrl = 'https://ancient-inlet-10538.herokuapp.com/api/persons';\r\n\r\nconst getAll = () =>\r\n\taxios\r\n\t\t.get(baseUrl)\r\n\t\t.then((response) => response.data)\r\n\t\t.catch((error) => console.log(error.message));\r\n\r\nconst addContact = (newContact) =>\r\n\taxios.post(baseUrl, newContact).then((result) => result.data);\r\n\r\nconst deleteContact = (id) => axios.delete(`${baseUrl}/${id}`);\r\n\r\nconst update = (id, newContact) =>\r\n\taxios\r\n\t\t.put(`${baseUrl}/${id}`, newContact)\r\n\t\t.then((result) => result.data)\r\n\t\t.catch((error) => console.log(error.message));\r\n\r\nexport default { getAll, addContact, deleteContact, update };\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Filter from './components/filter';\nimport PersonForm from './components/PersonForm';\nimport Numbers from './components/Numbers';\nimport serviceContacts from './services/contacts';\n\nconst App = () => {\n\tconst [ persons, setPersons ] = useState([]);\n\tconst [ newName, setNewName ] = useState('');\n\tconst [ newNumber, setNewNumber ] = useState('');\n\tconst [ filteredPersons, setfilteredPersons ] = useState([]);\n\tconst [ notification, setNotification ] = useState(null);\n\tconst [ actionResult, setActionResult ] = useState('');\n\n\tuseEffect(() => {\n\t\tserviceContacts.getAll().then((returnedContacts) => {\n\t\t\tsetPersons(returnedContacts);\n\t\t});\n\t}, []);\n\n\tconst setNewNameHandler = (event) => {\n\t\tlet newName = event.target.value;\n\t\tsetNewName(newName);\n\t};\n\n\tconst setNewNumberHandler = (event) => {\n\t\tconst newNumber = event.target.value;\n\t\tsetNewNumber(newNumber);\n\t};\n\n\tconst showNotification = (message, actionResult) => {\n\t\tsetNotification(message);\n\t\tsetActionResult(actionResult);\n\t\tsetTimeout(() => {\n\t\t\tsetNotification(null);\n\t\t}, 2000);\n\t};\n\n\tconst addNewContactHandler = (event) => {\n\t\tevent.preventDefault();\n\t\tconst newPerson = {\n\t\t\tname: newName,\n\t\t\tnumber: newNumber\n\t\t};\n\n\t\t//newName repeating check\n\t\tlet namesArr = persons.map((el) => el.name);\n\t\tlet newNameCheck = namesArr.includes(newName);\n\n\t\tif (newNameCheck) {\n\t\t\tlet nameMatch = persons.find((el) => el.name === newPerson.name);\n\t\t\tlet matchId = nameMatch.id;\n\t\t\talert(\n\t\t\t\t`The name ${newPerson.newName} is alredy added to the phonebook. Do you want to replace it's number?`\n\t\t\t);\n\t\t\tserviceContacts\n\t\t\t\t.update(matchId, newPerson)\n\t\t\t\t.then((returnedPerson) => {\n\t\t\t\t\t//refresh persons rendered list\n\t\t\t\t\tlet updatedPersons = persons.map(\n\t\t\t\t\t\t(el) =>\n\t\t\t\t\t\t\tel.id === returnedPerson.id\n\t\t\t\t\t\t\t\t? { ...returnedPerson }\n\t\t\t\t\t\t\t\t: el\n\t\t\t\t\t);\n\t\t\t\t\tsetPersons(updatedPersons);\n\t\t\t\t\t//notification\n\t\t\t\t\tshowNotification(\n\t\t\t\t\t\t` person '${returnedPerson.name}' successfully updated`,\n\t\t\t\t\t\t'success'\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.catch((error) =>\n\t\t\t\t\tshowNotification(`an ${error} occured`, 'fail')\n\t\t\t\t);\n\t\t} else {\n\t\t\t//post to server\n\t\t\tserviceContacts\n\t\t\t\t.addContact(newPerson)\n\t\t\t\t.then((returnedContact) => {\n\t\t\t\t\t//refresh persons rendered list\n\t\t\t\t\tconst personsCopy = persons.concat(returnedContact);\n\t\t\t\t\tsetPersons(personsCopy);\n\t\t\t\t\t//notification\n\t\t\t\t\tshowNotification(\n\t\t\t\t\t\t` person '${returnedContact.name}' successfully added`,\n\t\t\t\t\t\t'success'\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.catch((error) =>\n\t\t\t\t\tshowNotification(`an ${error} occured`, 'fail')\n\t\t\t\t);\n\t\t}\n\t};\n\n\tconst setFilterHandler = (event) => {\n\t\tlet newNameFilter = event.target.value;\n\t\tlet filtered = persons.filter(\n\t\t\t(el) => el.name.toLowerCase() === newNameFilter\n\t\t);\n\t\tsetfilteredPersons(filtered);\n\t};\n\n\tlet namesToShow = filteredPersons.length >= 1 ? filteredPersons : persons;\n\n\tconst deleteContactHandler = (id) => {\n\t\tconst personsCopy = [ ...persons ];\n\t\tconst newPersons = personsCopy.filter((el) => el.id !== id);\n\t\tserviceContacts\n\t\t\t.deleteContact(id)\n\t\t\t.then((res) => {\n\t\t\t\tsetPersons(newPersons);\n\t\t\t\tshowNotification(\n\t\t\t\t\t`contact with id number ${id} deleted `,\n\t\t\t\t\t'success'\n\t\t\t\t);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tshowNotification(\n\t\t\t\t\t`contact with id number ${id} has already been deleted `,\n\t\t\t\t\t'fail'\n\t\t\t\t);\n\t\t\t});\n\t};\n\treturn (\n\t\t<div>\n\t\t\t<h2>Phonebook</h2>\n\t\t\t<Filter onInput={setFilterHandler} />\n\t\t\t<h2>add new</h2>\n\t\t\t<PersonForm\n\t\t\t\tsubmit={addNewContactHandler}\n\t\t\t\tinputName={setNewNameHandler}\n\t\t\t\tinputNumber={setNewNumberHandler}\n\t\t\t/>\n\t\t\t<h2>Numbers</h2>\n\t\t\t<Numbers\n\t\t\t\tnamesToShow={namesToShow}\n\t\t\t\tdeleteNumber={deleteContactHandler}\n\t\t\t\tmessage={notification}\n\t\t\t\tactionResult={actionResult}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}